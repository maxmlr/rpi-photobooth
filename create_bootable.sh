#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([image],[path to dietpi image file],[])
# ARG_OPTIONAL_SINGLE([git],[g],["server", "server" or path to local git repository],[server])
# ARG_OPTIONAL_SINGLE([config],[c],[path to dietpi config file],[])
# ARG_OPTIONAL_SINGLE([dietpi],[d],[path to dietp.txt file],[])
# ARG_OPTIONAL_SINGLE([wifi],[w],[path to dietpi-wifi.txt file],[])
# ARG_OPTIONAL_SINGLE([key],[k],[path to public key file],[])
# ARG_OPTIONAL_SINGLE([photobooth],[p],[path to photobooth config file],[])
# ARG_HELP([Show help])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='gcdwkph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_git="server"
_arg_config=
_arg_dietpi=
_arg_wifi=
_arg_key=
_arg_photobooth=


print_help()
{
	printf '%s\n' "Show help"
	printf 'Usage: %s [-g|--git <arg>] [-c|--config <arg>] [-d|--dietpi <arg>] [-w|--wifi <arg>] [-k|--key <arg>] [-p|--photobooth <arg>] [-h|--help] <image>\n' "$0"
	printf '\t%s\n' "<image>: path to dietpi image file"
	printf '\t%s\n' "-g, --git: \"server\", \"server\" or path to local git repository (default: 'server')"
	printf '\t%s\n' "-c, --config: path to dietpi config file (no default)"
	printf '\t%s\n' "-d, --dietpi: path to dietp.txt file (no default)"
	printf '\t%s\n' "-w, --wifi: path to dietpi-wifi.txt file (no default)"
	printf '\t%s\n' "-k, --key: path to public key file (no default)"
	printf '\t%s\n' "-p, --photobooth: path to photobooth config file (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-g|--git)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_git="$2"
				shift
				;;
			--git=*)
				_arg_git="${_key##--git=}"
				;;
			-g*)
				_arg_git="${_key##-g}"
				;;
			-c|--config)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_config="$2"
				shift
				;;
			--config=*)
				_arg_config="${_key##--config=}"
				;;
			-c*)
				_arg_config="${_key##-c}"
				;;
			-d|--dietpi)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_dietpi="$2"
				shift
				;;
			--dietpi=*)
				_arg_dietpi="${_key##--dietpi=}"
				;;
			-d*)
				_arg_dietpi="${_key##-d}"
				;;
			-w|--wifi)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_wifi="$2"
				shift
				;;
			--wifi=*)
				_arg_wifi="${_key##--wifi=}"
				;;
			-w*)
				_arg_wifi="${_key##-w}"
				;;
			-k|--key)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_key="$2"
				shift
				;;
			--key=*)
				_arg_key="${_key##--key=}"
				;;
			-k*)
				_arg_key="${_key##-k}"
				;;
			-p|--photobooth)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_photobooth="$2"
				shift
				;;
			--photobooth=*)
				_arg_photobooth="${_key##--photobooth=}"
				;;
			-p*)
				_arg_photobooth="${_key##-p}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'image'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_image "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


MOUNT_POINT=/Volumes/boot
DEVICE_SDCARD=`mount | grep "${MOUNT_POINT} " | sed "s|\(/dev/disk[0-9]\).*|\1|"`
GIT_REPOSITORY_SERVER=https://github.com/maxmlr/rpi-photobooth.git
GIT_REPOSITORY_CLIENT=https://github.com/maxmlr/rpi-photobooth-client.git

dietpi="$_arg_image"
git="$_arg_git"
config="$_arg_config"
dietpi_config="$_arg_dietpi"
wifi_config="$_arg_wifi"
public_key="$_arg_key"
photobooth_config="$_arg_photobooth"

if [[ $git =~ ^server$ ]]
then
    echo "Installing Photobooth Server [latest]"
elif [[ $git =~ ^client$ ]]
then
    echo "Installing Photobooth Client [latest]"
else
    echo "Installing local repository [${git}]"
fi

create_sd () {
    device_sdcard=$1
    mountpoint=$2
    repo=/tmp/rpi-photobooth
    if [[ $git =~ ^server$ ]]
    then
        echo "Cloning server repository..."
        git clone ${GIT_REPOSITORY_SERVER} ${repo}
    elif [[ $git =~ ^client$ ]]
    then
        echo "Cloning client repository..."
        git clone ${GIT_REPOSITORY_CLIENT} ${repo}
    else
        repo="${git}"
    fi
    diskutil umount ${mountpoint}
    echo "Writing image `basename ${dietpi}` to [${device_sdcard}]"
    sudo dd \
        if="${dietpi}" \
        of="${device_sdcard}" bs=1m
    echo "Waiting for remount..."
    until [[ -d ${mountpoint} ]]
    do
        sleep 1
    done
    echo "Found: ${mountpoint},"
    cp -rf "${repo}"/boot/* ${mountpoint}
    if [[ ! -z ${config} ]]
    then
        echo "   USER config [sys] -> ${config}"
        cp -f ${config} ${mountpoint}/config.txt
    else
        echo "DEFAULT config [sys]"
    fi
    if [[ ! -z ${dietpi_config} ]]
    then
        echo "   USER config [dietpi] -> ${dietpi_config}"
        cp -f ${dietpi_config} ${mountpoint}/dietpi.txt
    else
        echo "DEFAULT config [dietpi]"
    fi
    if [[ ! -z ${wifi_config} ]]
    then
        echo "   USER config [wifi] -> ${wifi_config}"
        cp -f ${wifi_config} ${mountpoint}/dietpi-wifi.txt
    else
        echo "DEFAULT config [wifi]"
    fi
    if [[ ! -z ${public_key} ]]
    then
        echo " PHOTOBOOTH public key -> ${public_key}"
    else
        public_key="~/.ssh/id_rsa.pub"
        echo " LOCAL-USER public key -> ${public_key}"
    fi
    if [[ -f "$public_key" ]]; then
        echo "Installing public-key: ${public_key}"
        cp -f ${public_key} ${mountpoint}/authorized_keys
    else
        echo "ERROR - public key not found: ${public_key}"
    fi
    if [[ ! -z ${photobooth_config} ]]
    then
        echo "   USER defined photobooth config: ${photobooth_config}"
        cp -f ${photobooth_config} ${mountpoint}/photobooth.conf
    else
        echo "DEFAULT photobooth config"
    fi

	source ${mountpoint}/photobooth.conf
	echo '' >> ${mountpoint}/config.txt
	echo "#-------Photobooth---------" >> ${mountpoint}/config.txt
	for config in "${DIETPI_CONFIG[@]}"
	do
		key=`echo "$config" | cut -d"=" -f1 | sed -e s"|\#||g"`
		if tail -r ${mountpoint}/config.txt | grep -m1 -q "$key"; then
			config_old=`tail -r ${mountpoint}/config.txt | grep -m1 "$key"`
			if [[ "$config" = "$config_old" ]]
			then
				echo "[config] no change: $key"
			else
				echo "[config]    update: `grep "$key" ${mountpoint}/config.txt` -> $config"
				sed -i -e "s|.*$key.*|$config|" ${mountpoint}/config.txt
			fi
		else
			echo "[config]       new: $config"
			echo "$config" >> ${mountpoint}/config.txt
		fi
	done

    if [[ -d ${mountpoint} ]]
    then
        echo "Unmounting..."
        diskutil umount ${mountpoint}
    fi
    echo "Done."
}

if [[ ! -z ${DEVICE_SDCARD} ]]
then
    read -r -n 1 -p "Formatting device ${DEVICE_SDCARD} [`mount | grep ${MOUNT_POINT}`] [Y/n]? "
    echo
fi

if [[ $REPLY =~ ^[Yy]$ ]]
then
    create_sd "${DEVICE_SDCARD}" "${MOUNT_POINT}"
else
    if [[ ! -z ${DEVICE_SDCARD} ]]
    then
        read -r -p "Enter absolute path of mount point: " MOUNT_POINT
        read -r -n 1 -p "Formatting device ${DEVICE_SDCARD} [`mount | grep ${MOUNT_POINT}`] [Y/n]? "
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            create_sd "${DEVICE_SDCARD}" "${MOUNT_POINT}"
        else
            echo "Aborted."
        fi
    else
        read -r -p "Enter device: " DEVICE_SDCARD
        read -r -n 1 -p "Formatting device ${DEVICE_SDCARD} [Y/n]? "
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            create_sd "${DEVICE_SDCARD}" "${MOUNT_POINT}"
        else
            echo "Aborted."
        fi
    fi
fi

# ] <-- needed because of Argbash
